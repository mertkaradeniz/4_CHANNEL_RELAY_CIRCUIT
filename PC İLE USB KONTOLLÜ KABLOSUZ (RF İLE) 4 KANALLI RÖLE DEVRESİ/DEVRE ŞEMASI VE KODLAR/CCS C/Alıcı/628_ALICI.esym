C L "MAIN" 0 37 1 "FUNCTION"
D G "__PCM__" 0 65 ""5.007""
D G "__DEVICE__" 0 65 "628"
D G "__DATE__" 0 65 ""02-Tem-16""
D G "__TIME__" 0 65 ""03:07:51"" "Standard Header file for the PIC16F628 device ////////////////"
c L "set_tris_a" 1 5 13 "FUNCTION"
v L "value" 1 28 "int8" `53 
f B "set_tris_a" 1 28 "void(int8 value)" `52 
v L "value" 1 29 "int8" `55 
f B "set_tris_b" 1 29 "void(int8 value)" `54 
f B "get_tris_a" 1 30 "int8()" `56 
f B "get_tris_b" 1 31 "int8()" `57 
v L "value" 1 32 "int8" `59 
f B "output_a" 1 32 "void(int8 value)" `58 
v L "value" 1 33 "int8" `61 
f B "output_b" 1 33 "void(int8 value)" `60 
f B "input_a" 1 34 "int8()" `62 
f B "input_b" 1 35 "int8()" `63 
f B "input_change_a" 1 36 "int8()" `64 
f B "input_change_b" 1 37 "int8()" `65 
v L "pin" 1 38 "int16" `67 
f B "input" 1 38 "int8(int16 pin)" `66 
v L "pin" 1 39 "int16" `69 
f B "input_state" 1 39 "int8(int16 pin)" `68 
v L "pin" 1 40 "int16" `71 
f B "output_low" 1 40 "void(int16 pin)" `70 
v L "pin" 1 41 "int16" `73 
f B "output_high" 1 41 "void(int16 pin)" `72 
v L "pin" 1 42 "int16" `75 
f B "output_toggle" 1 42 "void(int16 pin)" `74 
v L "pin" 1 43 "int16" `77 
v L "level" 1 43 "int8" `78 
f B "output_bit" 1 43 "void(int16 pin,int8 level)" `76 
v L "pin" 1 44 "int16" `80 
f B "output_float" 1 44 "void(int16 pin)" `79 
v L "pin" 1 45 "int16" `82 
f B "output_drive" 1 45 "void(int16 pin)" `81  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 49 "40"
d G "PIN_A1" 1 50 "41"
d G "PIN_A2" 1 51 "42"
d G "PIN_A3" 1 52 "43"
d G "PIN_A4" 1 53 "44"
d G "PIN_A5" 1 54 "45"
d G "PIN_A6" 1 55 "46"
d G "PIN_A7" 1 56 "47"
d G "PIN_B0" 1 58 "48"
d G "PIN_B1" 1 59 "49"
d G "PIN_B2" 1 60 "50"
d G "PIN_B3" 1 61 "51"
d G "PIN_B4" 1 62 "52"
d G "PIN_B5" 1 63 "53"
d G "PIN_B6" 1 64 "54"
d G "PIN_B7" 1 65 "55"
d G "FALSE" 1 68 "0"
d G "TRUE" 1 69 "1"
d G "BYTE" 1 71 "int8"
d G "BOOLEAN" 1 72 "int1"
d G "getc" 1 74 "getch"
d G "fgetc" 1 75 "getch"
d G "getchar" 1 76 "getch"
d G "putc" 1 77 "putchar"
d G "fputc" 1 78 "putchar"
d G "fgets" 1 79 "gets"
d G "fputs" 1 80 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 85 "int8()" `83 
f B "reset_cpu" 1 86 "void()" `84 
f B "sleep" 1 87 "void()" `85  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 89 "3"
d G "WDT_TIMEOUT" 1 90 "11"
d G "MCLR_FROM_SLEEP" 1 91 "19"
d G "MCLR_FROM_RUN" 1 92 "27"
d G "NORMAL_POWER_UP" 1 93 "25"
d G "BROWNOUT_RESTART" 1 94 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 101 "int8" `87 
f B "setup_timer_0" 1 101 "void(int8 mode)" `86 
v L "value" 1 102 "int8" `89 
f B "set_timer0" 1 102 "void(int8 value)" `88 
f B "get_timer0" 1 103 "int8()" `90 
v L "mode" 1 104 "int8" `92 
v L "prescaler" 1 104 "int8" `93 
f B "setup_counters" 1 104 "void(int8 mode,int8 prescaler)" `91 
v L "value" 1 105 "int8" `95 
f B "set_rtcc" 1 105 "void(int8 value)" `94 
f B "get_rtcc" 1 106 "int8()" `96  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 108 "0"
d G "T0_EXT_L_TO_H" 1 109 "32"
d G "T0_EXT_H_TO_L" 1 110 "48"
d G "T0_DIV_1" 1 112 "8"
d G "T0_DIV_2" 1 113 "0"
d G "T0_DIV_4" 1 114 "1"
d G "T0_DIV_8" 1 115 "2"
d G "T0_DIV_16" 1 116 "3"
d G "T0_DIV_32" 1 117 "4"
d G "T0_DIV_64" 1 118 "5"
d G "T0_DIV_128" 1 119 "6"
d G "T0_DIV_256" 1 120 "7"
d G "T0_8_BIT" 1 123 "0"
d G "RTCC_INTERNAL" 1 125 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 126 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 127 "48"
d G "RTCC_DIV_1" 1 128 "8"
d G "RTCC_DIV_2" 1 129 "0"
d G "RTCC_DIV_4" 1 130 "1"
d G "RTCC_DIV_8" 1 131 "2"
d G "RTCC_DIV_16" 1 132 "3"
d G "RTCC_DIV_32" 1 133 "4"
d G "RTCC_DIV_64" 1 134 "5"
d G "RTCC_DIV_128" 1 135 "6"
d G "RTCC_DIV_256" 1 136 "7"
d G "RTCC_8_BIT" 1 137 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 148 "int16" `98 
f B "setup_wdt" 1 148 "void(int16 mode)" `97 
f B "restart_wdt" 1 149 "void()" `99  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 152 "8"
d G "WDT_36MS" 1 153 "9"
d G "WDT_72MS" 1 154 "10"
d G "WDT_144MS" 1 155 "11"
d G "WDT_288MS" 1 156 "12"
d G "WDT_576MS" 1 157 "13"
d G "WDT_1152MS" 1 158 "14"
d G "WDT_2304MS" 1 159 "15"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 165 "int16" `101 
f B "setup_timer_1" 1 165 "void(int16 mode)" `100 
f B "get_timer1" 1 166 "int16()" `102 
v L "value" 1 167 "int16" `104 
f B "set_timer1" 1 167 "void(int16 value)" `103  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 170 "0"
d G "T1_INTERNAL" 1 171 "0x85"
d G "T1_EXTERNAL" 1 172 "0x87"
d G "T1_EXTERNAL_SYNC" 1 173 "0x83"
d G "T1_CLK_OUT" 1 175 "8"
d G "T1_DIV_BY_1" 1 177 "0"
d G "T1_DIV_BY_2" 1 178 "0x10"
d G "T1_DIV_BY_4" 1 179 "0x20"
d G "T1_DIV_BY_8" 1 180 "0x30"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 185 "int8" `106 
v L "period" 1 185 "int8" `107 
v L "postscale" 1 185 "int8" `108 
f B "setup_timer_2" 1 185 "void(int8 mode,int8 period,int8 postscale)" `105 
f B "get_timer2" 1 186 "int8()" `109 
v L "value" 1 187 "int8" `111 
f B "set_timer2" 1 187 "void(int8 value)" `110  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 189 "0"
d G "T2_DIV_BY_1" 1 190 "4"
d G "T2_DIV_BY_4" 1 191 "5"
d G "T2_DIV_BY_16" 1 192 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 198 "int32" `113 
f B "setup_ccp1" 1 198 "void(int32 mode)" `112 
v L "mode" 1 199 "int32" `115 
v L "pwm" 1 199 "int8" `116 
f G "setup_ccp1" 1 199 "void(int32 mode,int8 pwm)" `114 
v L "value" 1 200 "int16" `118 
f B "set_pwm1_duty" 1 200 "void(int16 value)" `117  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 202 "0"
d G "CCP_CAPTURE_FE" 1 203 "4"
d G "CCP_CAPTURE_RE" 1 204 "5"
d G "CCP_CAPTURE_DIV_4" 1 205 "6"
d G "CCP_CAPTURE_DIV_16" 1 206 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 207 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 208 "9"
d G "CCP_COMPARE_INT" 1 209 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 210 "0xB"
d G "CCP_PWM" 1 211 "0xC"
d G "CCP_PWM_PLUS_1" 1 212 "0x1c"
d G "CCP_PWM_PLUS_2" 1 213 "0x2c"
d G "CCP_PWM_PLUS_3" 1 214 "0x3c"
c L "set_pwm1_duty" 1 5 2 "FUNCTION"
v L "baud" 1 220 "int32" `123 
f B "setup_uart" 1 220 "void(int32 baud)" `122 
v L "baud" 1 221 "int32" `125 
v L "stream" 1 221 "int8" `126 
f G "setup_uart" 1 221 "void(int32 baud,int8 stream)" `124 
v L "baud" 1 222 "int32" `128 
v L "stream" 1 222 "int8" `129 
v L "clock" 1 222 "int32" `130 
f G "setup_uart" 1 222 "void(int32 baud,int8 stream,int32 clock)" `127 
v L "baud" 1 223 "int32" `132 
f B "set_uart_speed" 1 223 "void(int32 baud)" `131 
v L "baud" 1 224 "int32" `134 
v L "stream" 1 224 "int8" `135 
f G "set_uart_speed" 1 224 "void(int32 baud,int8 stream)" `133 
v L "baud" 1 225 "int32" `137 
v L "stream" 1 225 "int8" `138 
v L "clock" 1 225 "int32" `139 
f G "set_uart_speed" 1 225 "void(int32 baud,int8 stream,int32 clock)" `136  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 229 "2"
d G "UART_DATA" 1 230 "4"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 234 "int32" `141 
f B "setup_comparator" 1 234 "void(int32 mode)" `140  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A2" 1 236 "0xfff04"
d G "A0_A2_A1_A2" 1 237 "0x7ff03"
d G "NC_NC_A1_A2" 1 238 "0x6ff05"
d G "NC_NC_NC_NC" 1 239 "0x0ff07"
d G "A0_VR_A1_VR" 1 240 "0x3ff02"
d G "A3_VR_A2_VR" 1 241 "0xcff0A"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 242 "0x7e706"
d G "A3_A2_A1_A2" 1 243 "0xeff09"
d G "CP1_INVERT" 1 244 "0x00010"
d G "CP2_INVERT" 1 245 "0x00020"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 252 "int8" `145 
f B "setup_vref" 1 252 "void(int8 mode)" `144  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 254 "0xa0"
d G "VREF_HIGH" 1 255 "0x80"
d G "VREF_A2" 1 257 "0x40"
c L "setup_vref" 1 5 3 "FUNCTION"
v L "x" 1 263 "sint8" `147 
f B "abs" 1 263 "sint8(sint8 x)" `146 
v L "x" 1 264 "sint16" `149 
f G "abs" 1 264 "sint16(sint16 x)" `148 
v L "x" 1 265 "sint32" `151 
f G "abs" 1 265 "sint32(sint32 x)" `150 
v L "x" 1 266 "float" `153 
f G "abs" 1 266 "float(float x)" `152 
v L "??65535" 1 267 "int8" `155 
v L "??65535" 1 267 "int8" `156 
f B "_mul" 1 267 "int16(int8 ,int8 )" `154 
v L "??65535" 1 268 "sint8" `155 
v L "??65535" 1 268 "sint8" `159 
f G "_mul" 1 268 "sint16(sint8 ,sint8 )" `157 
v L "??65535" 1 269 "int16" `155 
v L "??65535" 1 269 "int16" `162 
f G "_mul" 1 269 "int32(int16 ,int16 )" `160 
v L "??65535" 1 270 "sint16" `155 
v L "??65535" 1 270 "sint16" `165 
f G "_mul" 1 270 "sint32(sint16 ,sint16 )" `163  "Memory Manipulation Prototypes:"
v L "bank" 1 273 "int8" `167 
v L "offset" 1 273 "int8" `168 
f B "read_bank" 1 273 "int8(int8 bank,int8 offset)" `166 
v L "bank" 1 274 "int8" `170 
v L "offset" 1 274 "int8" `171 
v L "value" 1 274 "int8" `172 
f B "write_bank" 1 274 "void(int8 bank,int8 offset,int8 value)" `169 
v L "dest" 1 275 "*int8" `174 
v L "src" 1 275 "*int8" `175 
f B "strcpy" 1 275 "void(*int8 dest,*int8 src)" `173 
v L "dest" 1 276 "*int8" `177 
v L "src" 1 276 "*int8" `178 
f B "strcopy" 1 276 "void(*int8 dest,*int8 src)" `176 
v L "destination" 1 277 "*int8" `180 
v L "value" 1 277 "int8" `181 
v L "num" 1 277 "int16" `182 
f B "memset" 1 277 "void(*int8 destination,int8 value,int16 num)" `179 
v L "destination" 1 278 "*int8" `184 
v L "source" 1 278 "*int8" `185 
v L "num" 1 278 "int16" `186 
f B "memcpy" 1 278 "void(*int8 destination,*int8 source,int16 num)" `183  "String Prototypes:"
v L "cvalue" 1 281 "int8" `188 
f B "toupper" 1 281 "int8(int8 cvalue)" `187 
v L "cvalue" 1 282 "int8" `190 
f B "tolower" 1 282 "int8(int8 cvalue)" `189 
v L "string" 1 283 "*int8" `192 
v L "cstring" 1 283 "*int8" `193 
f B "sprintf" 1 283 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `191  "Data Manipulators Prototypes:"
v L "address" 1 286 "*int8" `196 
v L "bytes" 1 286 "int8" `197 
v L "value" 1 286 "int8" `198 
f B "shift_left" 1 286 "int8(*int8 address,int8 bytes,int8 value)" `195 
v L "address" 1 287 "*int8" `200 
v L "bytes" 1 287 "int8" `201 
v L "value" 1 287 "int8" `202 
f B "shift_right" 1 287 "int8(*int8 address,int8 bytes,int8 value)" `199 
v L "address" 1 288 "*int8" `204 
v L "bytes" 1 288 "int8" `205 
f B "rotate_left" 1 288 "void(*int8 address,int8 bytes)" `203 
v L "address" 1 289 "*int8" `207 
v L "bytes" 1 289 "int8" `208 
f B "rotate_right" 1 289 "void(*int8 address,int8 bytes)" `206 
v L "value" 1 290 "int8" `210 
f B "swap" 1 290 "void(int8 value)" `209 
v L "var" 1 291 "int16" `212 
v L "offset" 1 291 "int8" `213 
f B "make8" 1 291 "int8(int16 var,int8 offset)" `211 
v L "var" 1 292 "int32" `212 
v L "offset" 1 292 "int8" `216 
f G "make8" 1 292 "int8(int32 var,int8 offset)" `214 
v L "varhigh" 1 293 "int8" `218 
v L "varlow" 1 293 "int8" `219 
f B "make16" 1 293 "int16(int8 varhigh,int8 varlow)" `217 
v L "var1" 1 294 "int16" `221 
f B "make32" 1 294 "int32(int16 var1)" `220 
v L "var1" 1 295 "int16" `223 
v L "var2" 1 295 "int16" `224 
f G "make32" 1 295 "int32(int16 var1,int16 var2)" `222 
v L "var1" 1 296 "int16" `223 
v L "var2" 1 296 "int8" `227 
f G "make32" 1 296 "int32(int16 var1,int8 var2)" `225 
v L "var1" 1 297 "int16" `229 
v L "var2" 1 297 "int8" `230 
v L "var3" 1 297 "int8" `231 
f G "make32" 1 297 "int32(int16 var1,int8 var2,int8 var3)" `228 
v L "var1" 1 298 "int8" `233 
f G "make32" 1 298 "int32(int8 var1)" `232 
v L "var1" 1 299 "int8" `223 
v L "var2" 1 299 "int8" `236 
f G "make32" 1 299 "int32(int8 var1,int8 var2)" `234 
v L "var1" 1 300 "int8" `229 
v L "var2" 1 300 "int8" `230 
v L "var3" 1 300 "int8" `240 
f G "make32" 1 300 "int32(int8 var1,int8 var2,int8 var3)" `237 
v L "var1" 1 301 "int8" `242 
v L "var2" 1 301 "int8" `243 
v L "var3" 1 301 "int8" `244 
v L "var4" 1 301 "int8" `245 
f G "make32" 1 301 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `241 
v L "var1" 1 302 "int8" `223 
v L "var2" 1 302 "int16" `248 
f G "make32" 1 302 "int32(int8 var1,int16 var2)" `246 
v L "var1" 1 303 "int8" `229 
v L "var2" 1 303 "int16" `230 
v L "var3" 1 303 "int8" `252 
f G "make32" 1 303 "int32(int8 var1,int16 var2,int8 var3)" `249 
v L "var1" 1 304 "int8" `229 
v L "var2" 1 304 "int8" `230 
v L "var3" 1 304 "int16" `256 
f G "make32" 1 304 "int32(int8 var1,int8 var2,int16 var3)" `253 
v L "var" 1 305 "int8" `258 
v L "bit" 1 305 "int8" `259 
f B "bit_set" 1 305 "void(int8 var,int8 bit)" `257 
v L "var" 1 306 "int16" `258 
v L "bit" 1 306 "int8" `262 
f G "bit_set" 1 306 "void(int16 var,int8 bit)" `260 
v L "var" 1 307 "int32" `258 
v L "bit" 1 307 "int8" `265 
f G "bit_set" 1 307 "void(int32 var,int8 bit)" `263 
v L "var" 1 308 "int8" `267 
v L "bit" 1 308 "int8" `268 
f B "bit_clear" 1 308 "void(int8 var,int8 bit)" `266 
v L "var" 1 309 "int16" `267 
v L "bit" 1 309 "int8" `271 
f G "bit_clear" 1 309 "void(int16 var,int8 bit)" `269 
v L "var" 1 310 "int32" `267 
v L "bit" 1 310 "int8" `274 
f G "bit_clear" 1 310 "void(int32 var,int8 bit)" `272 
v L "var" 1 311 "int8" `276 
v L "bit" 1 311 "int8" `277 
f B "bit_test" 1 311 "int8(int8 var,int8 bit)" `275 
v L "var" 1 312 "int16" `276 
v L "bit" 1 312 "int8" `280 
f G "bit_test" 1 312 "int8(int16 var,int8 bit)" `278 
v L "var" 1 313 "int32" `276 
v L "bit" 1 313 "int8" `283 
f G "bit_test" 1 313 "int8(int32 var,int8 bit)" `281  "#use delay() Prototypes:"
v L "count" 1 316 "int8" `285 
f B "delay_cycles" 1 316 "void(int8 count)" `284 
v L "time" 1 317 "int16" `287 
f B "delay_ms" 1 317 "void(int16 time)" `286 
v L "time" 1 318 "int16" `289 
f B "delay_us" 1 318 "void(int16 time)" `288  "#use rs232() Prototypes:"
v L "cdata" 1 321 "int8" `291 
f B "putchar" 1 321 "void(int8 cdata)" `290 
v L "cdata" 1 322 "int8" `293 
v L "stream" 1 322 "int8" `294 
f G "putchar" 1 322 "void(int8 cdata,int8 stream)" `292 
v L "string" 1 323 "*int8" `296 
f B "puts" 1 323 "void(*int8 string)" `295 
v L "string" 1 324 "*int8" `298 
v L "stream" 1 324 "int8" `299 
f G "puts" 1 324 "void(*int8 string,int8 stream)" `297 
f B "getch" 1 325 "int8()" `300 
v L "stream" 1 326 "int8" `302 
f G "getch" 1 326 "int8(int8 stream)" `301 
v L "string" 1 327 "*int8" `304 
f B "gets" 1 327 "void(*int8 string)" `303 
v L "string" 1 328 "*int8" `306 
v L "stream" 1 328 "int8" `307 
f G "gets" 1 328 "void(*int8 string,int8 stream)" `305 
f B "kbhit" 1 329 "int8()" `308 
v L "stream" 1 330 "int8" `310 
f G "kbhit" 1 330 "int8(int8 stream)" `309 
v L "string" 1 331 "*int8" `312 
f B "printf" 1 331 "void(*int8 string,*int8 _VA_LIST)" `311 
v L "stream" 1 332 "int8" `315 
v L "string" 1 332 "*int8" `316 
f B "fprintf" 1 332 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `314 
f B "putc_send" 1 333 "void()" `318 
v L "stream" 1 334 "int8" `320 
f B "fputc_send" 1 334 "void(int8 stream)" `319 
f B "rcv_buffer_full" 1 335 "int8()" `321 
v L "stream" 1 336 "int8" `323 
f G "rcv_buffer_full" 1 336 "int8(int8 stream)" `322 
f B "rcv_buffer_bytes" 1 337 "int16()" `324 
v L "stream" 1 338 "int8" `326 
f G "rcv_buffer_bytes" 1 338 "int16(int8 stream)" `325 
f B "tx_buffer_full" 1 339 "int8()" `327 
v L "stream" 1 340 "int8" `329 
f G "tx_buffer_full" 1 340 "int8(int8 stream)" `328 
f B "tx_buffer_bytes" 1 341 "int16()" `330 
v L "stream" 1 342 "int8" `332 
f G "tx_buffer_bytes" 1 342 "int16(int8 stream)" `331  "#use i2c() Prototypes:"
f B "i2c_read" 1 345 "int8()" `333 
v L "stream" 1 346 "int8" `335 
f G "i2c_read" 1 346 "int8(int8 stream)" `334 
v L "stream" 1 347 "int8" `337 
v L "ack" 1 347 "int8" `338 
f G "i2c_read" 1 347 "int8(int8 stream,int8 ack)" `336 
v L "data" 1 348 "int8" `340 
f B "i2c_write" 1 348 "int8(int8 data)" `339 
v L "stream" 1 349 "int8" `342 
v L "data" 1 349 "int8" `343 
f G "i2c_write" 1 349 "int8(int8 stream,int8 data)" `341 
f B "i2c_start" 1 350 "void()" `344 
v L "stream" 1 351 "int8" `346 
f G "i2c_start" 1 351 "void(int8 stream)" `345 
v L "stream" 1 352 "int8" `348 
v L "restart" 1 352 "int8" `349 
f G "i2c_start" 1 352 "void(int8 stream,int8 restart)" `347 
f B "i2c_stop" 1 353 "void()" `350 
v L "stream" 1 354 "int8" `352 
f G "i2c_stop" 1 354 "void(int8 stream)" `351 
f B "i2c_isr_state" 1 355 "int8()" `353 
v L "addr" 1 356 "int8" `355 
f B "i2c_slaveaddr" 1 356 "void(int8 addr)" `354 
v L "stream" 1 357 "int8" `357 
v L "addr" 1 357 "int8" `358 
f G "i2c_slaveaddr" 1 357 "void(int8 stream,int8 addr)" `356 
f B "i2c_poll" 1 358 "int8()" `359 
v L "stream" 1 359 "int8" `361 
f G "i2c_poll" 1 359 "int8(int8 stream)" `360 
v L "baud" 1 360 "int32" `363 
f B "i2c_init" 1 360 "void(int32 baud)" `362 
v L "stream" 1 361 "int8" `365 
v L "baud" 1 361 "int32" `366 
f G "i2c_init" 1 361 "void(int8 stream,int32 baud)" `364  "#use spi() Prototypes:"
f B "spi_xfer" 1 364 "int8()" `367 
f G "spi_xfer" 1 365 "int16()" `368 
f G "spi_xfer" 1 366 "int32()" `369 
v L "data" 1 367 "int8" `371 
f G "spi_xfer" 1 367 "int8(int8 data)" `370 
v L "data" 1 368 "int16" `373 
f G "spi_xfer" 1 368 "int16(int16 data)" `372 
v L "data" 1 369 "int32" `375 
f G "spi_xfer" 1 369 "int32(int32 data)" `374 
v L "stream" 1 370 "int8" `377 
v L "data" 1 370 "int8" `378 
f G "spi_xfer" 1 370 "int8(int8 stream,int8 data)" `376 
v L "stream" 1 371 "int8" `377 
v L "data" 1 371 "int16" `381 
f G "spi_xfer" 1 371 "int16(int8 stream,int16 data)" `379 
v L "stream" 1 372 "int8" `377 
v L "data" 1 372 "int32" `384 
f G "spi_xfer" 1 372 "int32(int8 stream,int32 data)" `382 
v L "stream" 1 373 "int8" `386 
v L "data" 1 373 "int8" `387 
v L "bits" 1 373 "int8" `388 
f G "spi_xfer" 1 373 "int8(int8 stream,int8 data,int8 bits)" `385 
v L "stream" 1 374 "int8" `386 
v L "data" 1 374 "int16" `387 
v L "bits" 1 374 "int8" `392 
f G "spi_xfer" 1 374 "int16(int8 stream,int16 data,int8 bits)" `389 
v L "stream" 1 375 "int8" `386 
v L "data" 1 375 "int32" `387 
v L "bits" 1 375 "int8" `396 
f G "spi_xfer" 1 375 "int32(int8 stream,int32 data,int8 bits)" `393 
v L "baud" 1 376 "int32" `398 
f B "spi_init" 1 376 "void(int32 baud)" `397 
v L "stream" 1 377 "int8" `400 
v L "baud" 1 377 "int32" `401 
f G "spi_init" 1 377 "void(int8 stream,int32 baud)" `399 
v L "baud" 1 378 "int32" `403 
f B "spi_speed" 1 378 "void(int32 baud)" `402 
v L "stream" 1 379 "int8" `405 
v L "baud" 1 379 "int32" `406 
f G "spi_speed" 1 379 "void(int8 stream,int32 baud)" `404 
v L "stream" 1 380 "int8" `408 
v L "baud" 1 380 "int32" `409 
v L "clock" 1 380 "int32" `410 
f G "spi_speed" 1 380 "void(int8 stream,int32 baud,int32 clock)" `407 
v L "data" 1 381 "int8" `412 
f B "spi_prewrite" 1 381 "void(int8 data)" `411 
v L "data" 1 382 "int16" `414 
f G "spi_prewrite" 1 382 "void(int16 data)" `413 
v L "data" 1 383 "int32" `416 
f G "spi_prewrite" 1 383 "void(int32 data)" `415 
v L "??65535" 1 384 "int8" `418 
v L "data" 1 384 "int8" `419 
f G "spi_prewrite" 1 384 "void(int8 ,int8 data)" `417 
v L "??65535" 1 385 "int8" `418 
v L "data" 1 385 "int16" `422 
f G "spi_prewrite" 1 385 "void(int8 ,int16 data)" `420 
v L "??65535" 1 386 "int8" `418 
v L "data" 1 386 "int32" `425 
f G "spi_prewrite" 1 386 "void(int8 ,int32 data)" `423 
f B "spi_xfer_in" 1 387 "int8()" `426 
f G "spi_xfer_in" 1 388 "int16()" `427 
f G "spi_xfer_in" 1 389 "int32()" `428 
v L "bits" 1 390 "int8" `430 
f G "spi_xfer_in" 1 390 "int8(int8 bits)" `429 
v L "bits" 1 391 "int8" `432 
f G "spi_xfer_in" 1 391 "int16(int8 bits)" `431 
v L "bits" 1 392 "int8" `434 
f G "spi_xfer_in" 1 392 "int32(int8 bits)" `433 
v L "stream" 1 393 "int8" `436 
v L "bits" 1 393 "int8" `437 
f G "spi_xfer_in" 1 393 "int8(int8 stream,int8 bits)" `435 
v L "stream" 1 394 "int8" `436 
v L "bits" 1 394 "int8" `440 
f G "spi_xfer_in" 1 394 "int16(int8 stream,int8 bits)" `438 
v L "stream" 1 395 "int8" `436 
v L "bits" 1 395 "int8" `443 
f G "spi_xfer_in" 1 395 "int32(int8 stream,int8 bits)" `441  "#use rtos() Prototypes:"
f B "rtos_run" 1 398 "void()" `444 
f B "rtos_yield" 1 399 "void()" `445 
v L "task" 1 400 "int8" `447 
f B "rtos_enable" 1 400 "void(int8 task)" `446 
v L "task" 1 401 "int8" `449 
f B "rtos_disable" 1 401 "void(int8 task)" `448 
f B "rtos_terminate" 1 402 "void()" `450 
v L "flag" 1 403 "int8" `452 
f B "rtos_await" 1 403 "void(int8 flag)" `451 
v L "sem" 1 404 "int8" `454 
f B "rtos_wait" 1 404 "void(int8 sem)" `453 
v L "sem" 1 405 "int8" `456 
f B "rtos_signal" 1 405 "void(int8 sem)" `455 
v L "task" 1 406 "int8" `458 
v L "msg" 1 406 "int8" `459 
f B "rtos_msg_send" 1 406 "void(int8 task,int8 msg)" `457 
f B "rtos_msg_read" 1 407 "int8()" `460 
f B "rtos_msg_poll" 1 408 "int8()" `461 
v L "task" 1 409 "int8" `463 
f B "rtos_overrun" 1 409 "int8(int8 task)" `462 
v L "task" 1 410 "int8" `465 
v L "stat" 1 410 "*int8" `466 
f B "rtos_stats" 1 410 "void(int8 task,*int8 stat)" `464  "#use timer() Prototypes:"
f B "get_ticks" 1 413 "int8()" `467 
f G "get_ticks" 1 414 "int16()" `468 
f G "get_ticks" 1 415 "int32()" `469 
v L "stream" 1 416 "int8" `471 
f G "get_ticks" 1 416 "int8(int8 stream)" `470 
v L "stream" 1 417 "int8" `473 
f G "get_ticks" 1 417 "int16(int8 stream)" `472 
v L "stream" 1 418 "int8" `475 
f G "get_ticks" 1 418 "int32(int8 stream)" `474 
v L "value" 1 419 "int8" `477 
f B "set_ticks" 1 419 "void(int8 value)" `476 
v L "value" 1 420 "int16" `479 
f G "set_ticks" 1 420 "void(int16 value)" `478 
v L "value" 1 421 "int32" `481 
f G "set_ticks" 1 421 "void(int32 value)" `480 
v L "stream" 1 422 "int8" `483 
v L "value" 1 422 "int8" `484 
f G "set_ticks" 1 422 "void(int8 stream,int8 value)" `482 
v L "stream" 1 423 "int8" `483 
v L "value" 1 423 "int16" `487 
f G "set_ticks" 1 423 "void(int8 stream,int16 value)" `485 
v L "stream" 1 424 "int8" `483 
v L "value" 1 424 "int32" `490 
f G "set_ticks" 1 424 "void(int8 stream,int32 value)" `488  "#use pwm() Prototypes:"
f B "pwm_on" 1 427 "void()" `491 
v L "stream" 1 428 "int8" `493 
f G "pwm_on" 1 428 "void(int8 stream)" `492 
f B "pwm_off" 1 429 "void()" `494 
v L "stream" 1 430 "int8" `496 
f G "pwm_off" 1 430 "void(int8 stream)" `495 
v L "duty" 1 431 "int16" `498 
f B "pwm_set_duty" 1 431 "void(int16 duty)" `497 
v L "stream" 1 432 "int8" `500 
v L "duty" 1 432 "int16" `501 
f G "pwm_set_duty" 1 432 "void(int8 stream,int16 duty)" `499 
v L "percent" 1 433 "int16" `503 
f B "pwm_set_duty_percent" 1 433 "void(int16 percent)" `502 
v L "stream" 1 434 "int8" `505 
v L "percent" 1 434 "int16" `506 
f G "pwm_set_duty_percent" 1 434 "void(int8 stream,int16 percent)" `504 
v L "frequency" 1 435 "int32" `508 
f B "pwm_set_frequency" 1 435 "void(int32 frequency)" `507 
v L "stream" 1 436 "int8" `510 
v L "frequency" 1 436 "int32" `511 
f G "pwm_set_frequency" 1 436 "void(int8 stream,int32 frequency)" `509  "#use capture() Prototypes:"
f B "get_capture_time" 1 439 "int16()" `512 
v L "stream" 1 440 "int8" `514 
f G "get_capture_time" 1 440 "int16(int8 stream)" `513 
f B "get_capture_event" 1 441 "int8()" `515 
v L "stream" 1 442 "int8" `517 
f G "get_capture_event" 1 442 "int8(int8 stream)" `516  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 455 "int16" `519 
f B "goto_address" 1 455 "void(int16 address)" `518 
v L "label" 1 456 "int16" `521 
f B "label_address" 1 456 "int16(int16 label)" `520  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 463 "int8" `522 
v L "address" 1 466 "__EEADDRESS__" `524 
f B "read_eeprom" 1 466 "int8(__EEADDRESS__ address)" `523 
v L "address" 1 467 "__EEADDRESS__" `526 
v L "value" 1 467 "int8" `527 
f B "write_eeprom" 1 467 "void(__EEADDRESS__ address,int8 value)" `525  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 474 "int32" `529 
f B "enable_interrupts" 1 474 "void(int32 interrupt)" `528 
v L "interrupt" 1 475 "int32" `531 
f B "disable_interrupts" 1 475 "void(int32 interrupt)" `530 
v L "interrupt" 1 476 "int32" `533 
f B "clear_interrupt" 1 476 "void(int32 interrupt)" `532 
v L "interrupt" 1 477 "int32" `535 
f B "interrupt_active" 1 477 "int8(int32 interrupt)" `534 
v L "source" 1 478 "int8" `537 
v L "edge" 1 478 "int8" `538 
f B "ext_int_edge" 1 478 "void(int8 source,int8 edge)" `536 
v L "address" 1 479 "int16" `540 
f B "jump_to_irs" 1 479 "void(int16 address)" `539  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 481 "0x40"
d G "H_TO_L" 1 482 "0"
d G "GLOBAL" 1 484 "0x0BC0"
d G "PERIPH" 1 485 "0x0B40"
d G "INT_RTCC" 1 486 "0x000B20"
d G "INT_RB" 1 487 "0x00FF0B08"
d G "INT_EXT_L2H" 1 488 "0x50000B10"
d G "INT_EXT_H2L" 1 489 "0x60000B10"
d G "INT_EXT" 1 490 "0x000B10"
d G "INT_TBE" 1 491 "0x008C10"
d G "INT_RDA" 1 492 "0x008C20"
d G "INT_TIMER1" 1 493 "0x008C01"
d G "INT_TIMER2" 1 494 "0x008C02"
d G "INT_CCP1" 1 495 "0x008C04"
d G "INT_COMP" 1 496 "0x008C40"
d G "INT_TIMER0" 1 497 "0x000B20"
d G "INT_EEPROM" 1 498 "0x008C80"
D G "VeriTransferLed" 0 6 "pin_a3"
D G "DevrePowerLedLed" 0 7 "pin_a2"
V G "i" 0 8 "int8" `551 
F G "UsbTransferVeriOnayi" 0 11 "void()" `552 
F G "MAIN" 0 21 "void()" `553 
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
